-- MySQL Script generated by MySQL Workbench
-- Thu Apr 11 18:45:30 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema payment
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema payment
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `payment` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `payment` ;

-- -----------------------------------------------------
-- Table `payment`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `fname` VARCHAR(20) NULL DEFAULT NULL,
  `lname` VARCHAR(20) NULL DEFAULT NULL,
  `uname` VARCHAR(10) NULL DEFAULT NULL,
  `password` VARCHAR(10) NULL DEFAULT NULL,
  `isAdmin` TINYINT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `unique_uname` (`uname` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 33
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `payment`.`aggregate_transactions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment`.`aggregate_transactions` (
  `SNo` VARCHAR(50) NOT NULL,
  `comm` DECIMAL(10,2) NULL DEFAULT NULL,
  `total` DECIMAL(10,2) NULL DEFAULT NULL,
  `recMoney` DECIMAL(10,2) NULL DEFAULT NULL,
  `changes` DECIMAL(10,2) NULL DEFAULT NULL,
  `reversed` VARCHAR(20) NULL DEFAULT NULL,
  `id` INT NOT NULL,
  `date_` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`SNo`, `date_`, `id`),
  INDEX `user_id` (`id` ASC) VISIBLE,
  CONSTRAINT `user_id`
    FOREIGN KEY (`id`)
    REFERENCES `payment`.`users` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `payment`.`denomination`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment`.`denomination` (
  `d_denom_value` INT NOT NULL,
  `d_quantity` INT NULL DEFAULT NULL,
  `d_sum` DECIMAL(10,2) GENERATED ALWAYS AS ((case when ((`d_quantity` = 0) or (`d_denom_value` = 0)) then 0 else (`d_quantity` * `d_denom_value`) end)) STORED,
  `d_empid` INT NOT NULL,
  `d_date_` DATE NOT NULL,
  PRIMARY KEY (`d_empid`, `d_date_`, `d_denom_value`),
  CONSTRAINT `denomination_ibfk_1`
    FOREIGN KEY (`d_empid`)
    REFERENCES `payment`.`users` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `payment`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment`.`orders` (
  `SNo` INT NOT NULL,
  `fullname` VARCHAR(50) NULL DEFAULT NULL,
  `address` VARCHAR(30) NULL DEFAULT NULL,
  `city` VARCHAR(20) NULL DEFAULT NULL,
  `refNo` VARCHAR(25) NULL DEFAULT NULL,
  `recAcc` VARCHAR(25) NULL DEFAULT NULL,
  `amount` DECIMAL(10,2) NULL DEFAULT NULL,
  `comm` DECIMAL(8,2) NULL DEFAULT NULL,
  `total` DECIMAL(10,2) NULL DEFAULT NULL,
  `date_` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `state` INT NULL DEFAULT NULL,
  `reversed` TINYINT(1) NULL DEFAULT '0',
  `id` INT NOT NULL,
  PRIMARY KEY (`SNo`, `date_`, `id`),
  INDEX `id` (`id` ASC) VISIBLE,
  CONSTRAINT `id`
    FOREIGN KEY (`id`)
    REFERENCES `payment`.`users` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `payment`.`safe_transfers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment`.`safe_transfers` (
  `st_denom_value` INT NOT NULL,
  `st_quantity` INT NULL DEFAULT NULL,
  `st_sum` DECIMAL(10,2) GENERATED ALWAYS AS ((case when ((`st_quantity` = 0) or (`st_denom_value` = 0)) then 0 else (`st_quantity` * `st_denom_value`) end)) STORED,
  `st_empid` INT NOT NULL,
  `st_date_` DATE NOT NULL,
  `st_withdrawal` TINYINT(1) NOT NULL,
  PRIMARY KEY (`st_empid`, `st_date_`, `st_denom_value`, `st_withdrawal`),
  CONSTRAINT `safe_transfers_ibfk_1`
    FOREIGN KEY (`st_empid`)
    REFERENCES `payment`.`users` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `payment`;

DELIMITER $$
USE `payment`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `payment`.`transfer_to_denom_entry`
AFTER INSERT ON `payment`.`safe_transfers`
FOR EACH ROW
BEGIN
	IF NEW.st_withdrawal = 1 THEN
	INSERT INTO denomination (d_denom_value, d_quantity, d_empid, d_date_)
	VALUES (NEW.st_denom_value, NEW.st_quantity, NEW.st_empid, NEW.st_date_)
	ON DUPLICATE KEY UPDATE 
	d_quantity = d_quantity +  NEW.st_quantity;
	ELSEIF NEW.st_withdrawal = 0 THEN
    UPDATE denomination
        SET d_quantity = d_quantity - NEW.st_quantity
        WHERE d_denom_value = NEW.st_denom_value
        AND d_empid = NEW.st_empid
        AND d_date_ = NEW.st_date_;
         END IF;
END$$

USE `payment`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `payment`.`transfer_to_denom_entry_update`
AFTER UPDATE ON `payment`.`safe_transfers`
FOR EACH ROW
BEGIN
    UPDATE denomination
    SET d_quantity =d_quantity + (NEW.st_quantity - OLD.st_quantity)
    WHERE d_denom_value = OLD.st_denom_value 
        AND d_empid = OLD.st_empid 
        AND d_date_ =OLD.st_date_;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
